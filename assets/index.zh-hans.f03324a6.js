export default"# 命令\n\n有时候，我们会想更极客地对编辑器进行一些改动，比如点击一个按钮直接可以对选中内容进行斜体样式的切换。\n\n针对这种场景，我们为用户提供了一个命令管理器，其中有许多在预设（Presets）阶段定义和插件中使用的命令。\n\n## 运行命令\n\n我们可以在命令管理器中通过调用特定 **command key** 来进行指定操作。\n\n```typescript\nimport { Editor, commandsCtx } from '@milkdown/core';\nimport { commonmark, ToggleItalic } from '@milkdown/preset-commonmark';\n\nasync function setup() {\n    const editor = await Editor.make().use(commonmark).create();\n\n    const toggleItalic = () =>\n        editor.action((ctx) => {\n            // get command manager\n            const commandManager = ctx.get(commandsCtx);\n\n            // call command\n            commandManager.call(ToggleItalic);\n        });\n\n    // get markdown string:\n    $button.onClick = toggleItalic;\n}\n```\n\n## 创建命令\n\n你可以通过以下步骤来创建命令：\n\n1. 通过 `createCmdKey` 先创建一个 command key。\n2. 再创建对应的 command 方法。（它们也只是一些 [prosemirror commands](https://prosemirror.net/docs/guide/#commands)）\n3. 在命令管理器中对刚才创建的命令进行注册。\n\n### 例子：不携带参数的命令\n\n我们将在下面的例子中创建命令：\n\n```typescript\nimport { createCmdKey, MilkdownPlugin, CommandsReady, commandsCtx, schemaCtx } from '@milkdown/core';\nimport { wrapIn } from 'prosemirror-commands';\n\nexport const WrapInBlockquote = createCmdKey();\nconst plugin: MilkdownPlugin = () => async (ctx) => {\n    // wait for command manager ready\n    await ctx.wait(CommandsReady);\n\n    const commandManager = ctx.get(commandsCtx);\n    const schema = ctx.get(schemaCtx);\n\n    commandManager.create(WrapInBlockquote, () => wrapIn(schema.nodes.blockquote));\n};\n\n// call command\ncommandManager.call(WrapInBlockquote);\n```\n\n### 例子：携带参数的命令\n\n我们当然也可以为命令添加参数列表：\n\n```typescript\nimport { createCmdKey, MilkdownPlugin, CommandsReady, commandsCtx, schemaCtx } from '@milkdown/core';\nimport { setBlockType } from 'prosemirror-commands';\n\n// use number as the type of argument\nexport const WrapInHeading = createCmdKey<number>();\n\nconst plugin: MilkdownPlugin = () => async (ctx) => {\n    // wait for command manager ready\n    await ctx.wait(CommandsReady);\n\n    const commandManager = ctx.get(commandsCtx);\n    const schema = ctx.get(schemaCtx);\n\n    commandManager.create(WrapInBlockquote, (level = 1) => setBlockType(schema.nodes.heading, { level }));\n};\n\n// call command\ncommandManager.call(WrapInHeading); // turn to h1 by default\ncommandManager.call(WrapInHeading, 2); // turn to h2\n```\n\n---\n\n## 内部命令\n\n### Commonmark\n\n你可以使用 `import { commands } from '@milkdown/preset-commonmark'` 来获取代码中所有的命令。\n\n-   Toggle:\n    -   ToggleInlineCode\n    -   ToggleItalic\n    -   ToggleLink\n    -   ToggleBold\n-   Insert:\n    -   InsertHardbreak\n    -   InsertHr\n    -   InsertImage\n-   Modify:\n    -   ModifyLink\n    -   ModifyImage\n-   Wrap:\n    -   WrapInBlockquote\n    -   WrapInBulletList\n    -   WrapInOrderedList\n-   Turn Into:\n    -   TurnIntoCodeFence\n    -   TurnIntoHeading\n    -   TurnIntoText\n-   List Operation:\n    -   SplitListItem\n    -   SinkListItem\n    -   LiftListItem\n\n### GFM\n\n你可以使用 `import { commands } from '@milkdown/preset-gfm'` 来获取代码中所有的命令\n\n**GFM 包括来自 commonmark 中所有的命令**，并额外提供:\n\n-   Toggle:\n    -   ToggleStrikeThrough\n-   Turn Into:\n    -   TurnIntoTaskList\n-   Task List Operation:\n    -   SplitTaskListItem\n    -   SinkTaskListItem\n    -   LiftTaskListItem\n";
