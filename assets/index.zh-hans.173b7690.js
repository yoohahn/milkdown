export default"# Vue\n\n我们提供开箱即用的 vue 支持。\n\n> Vue version should be 3.x\n\n## 依赖安装\n\n除了 `@milkdown/core`，预设和主题，我们还需要安装 `@milkdown/vue`，它提供了让 milkdown 运行在 vue 中的能力。\n\n```bash\n# install with npm\nnpm install @milkdown/vue @milkdown/core\n\n# optional\nnpm install @milkdown/preset-commonmark @milkdown/theme-nord\n```\n\n## 创建一个组件\n\n创建一个组件十分简单。\n\n```typescript\nimport { defineComponent } from 'vue';\nimport { Editor, rootCtx } from '@milkdown/core';\nimport { nord } from '@milkdown/theme-nord';\nimport { VueEditor, useEditor } from '@milkdown/vue';\nimport { commonmark } from '@milkdown/preset-commonmark';\n\nexport const MilkdownEditor = defineComponent(() => {\n    const editor = useEditor((root) =>\n        Editor.make()\n            .config((ctx) => {\n                ctx.set(rootCtx, root);\n            })\n            .use(nord)\n            .use(commonmark),\n    );\n\n    return () => <VueEditor editor={editor} />;\n});\n```\n\n### 在线示例\n\n!CodeSandBox{milkdown-vue-setup-wjdup?fontsize=14&hidenavigation=1&theme=dark&view=preview}\n\n---\n\n## 自定义节点组件 Component\n\n我们提供开箱即用的自定义组件的支持。\n\n```typescript\nimport { inject, defineComponent, DefineComponent } from 'vue';\nimport { Editor, rootCtx } from '@milkdown/core';\nimport { VueEditor, useEditor } from '@milkdown/vue';\nimport { commonmark, paragraph, image } from '@milkdown/preset-commonmark';\nimport { Node } from 'prosemirror-model';\n\nconst CustomParagraph: DefineComponent = defineComponent({\n    name: 'my-paragraph',\n    setup(_, { slots }) {\n        return () => <div class=\"vue-paragraph\">{slots.default?.()}</div>;\n    },\n});\n\nconst CustomImage: DefineComponent = defineComponent({\n    name: 'my-image',\n    setup() {\n        const node: Node = inject('node', {} as Node);\n\n        return () => <img class=\"vue-image\" src={node.attrs.src} alt={node.attrs.alt} />;\n    },\n});\n\nexport const MyEditor = defineComponent(() => {\n    const editor = useEditor((root, renderVue) => {\n        const nodes = commonmark\n            .configure(paragraph, {\n                view: renderVue(CustomParagraph),\n            })\n            .configure(image, {\n                view: renderVue(CustomImage),\n            });\n        return Editor.make()\n            .config((ctx) => {\n                ctx.set(rootCtx, root);\n            })\n            .use(nodes);\n    });\n\n    return () => <VueEditor editor={editor} />;\n});\n```\n\n自定义组件中被注入的值：\n\n-   _editor_:\n\n    Milkdown 编辑器的实例。\n\n-   _node_:\n\n    当前需要组件渲染的 prosemirror 节点。\n    等同于 [nodeViews 中的 node 参数](https://prosemirror.net/docs/ref/#view.EditorProps.nodeViews)。\n\n-   _view_:\n\n    当前编辑器的 prosemirror view。\n    等同于 [nodeViews 中的 view 参数](https://prosemirror.net/docs/ref/#view.EditorProps.nodeViews)。\n\n-   _getPos_:\n\n    用于获取当前节点的位置的方法或属性。\n    等同于 [nodeViews 中的 getPos 参数](https://prosemirror.net/docs/ref/#view.EditorProps.nodeViews)。\n\n-   _decorations_:\n\n    当前节点的 prosemirror decorations。\n    等同于 [nodeViews 中的 decorations 参数](https://prosemirror.net/docs/ref/#view.EditorProps.nodeViews)。\n";
