export default"# 设计系统\n\n设计系统是主题的基础。\n\n```mermaid\ngraph TD;\n\ttheme{{Theme}};\n\tsystem((Design System));\n\n    theme --\x3e system;\n    system --\x3e Node;\n    system --\x3e Mark;\n    system --\x3e Plugin;\n```\n\n设计系统像是一种约定。主题实现设计系统，主题可以被不同的 nodes, marks 和插件消费。\n\n在[编写主题插件](/#/zh-hans/writing-theme-plugins)一节中，我们已经学习了主题的定义方式。在本节中将展示如何使用它。\n\n## 主题工具\n\n设计系统可以通过`themeToolCtx`来访问。\n\n```typescript\nimport { themeToolCtx } from '@milkdown/core';\n\nimport { createProsePlugin } from '@milkdown/utils';\n\nexport const myProsemirrorPlugin = createProsePlugin((_, utils) => {\n    const themeTool = utils.ctx.get(themeToolCtx);\n\n    // ...\n});\n```\n\n### font\n\n```typescript\nconst { typography, code } = themeTool.font;\n\ncss`\n    p {\n        font-family: ${typography};\n    }\n\n    code {\n        font-family: ${code};\n    }\n`;\n```\n\n### size\n\n```typescript\nconst { radius, lineWidth } = themeTool.size;\n\ncss`\n    border-radius: ${radius}px;\n    border: ${lineWidth}px solid #000;\n`;\n```\n\n### palette\n\n调色板用于根据当前主题生成颜色。\n\n```typescript\nconst { palette } = themeTool;\n\ncss`\n    background: ${palette('background')};\n    // 0.8 means it has 0.8 opacity.\n    color: ${palette('primary', 0.8)};\n`;\n```\n\n### mixin\n\n```typescript\nconst { scrollbar, shadow, border } = themeTool.mixin;\n\ncss`\n    ul {\n        ${scrollbar()};\n    }\n    div {\n        ${shadow()};\n        ${border()};\n    }\n`;\n```\n\n### slots\n\n```typescript\nconst { icon } = themeTool.slots;\n\nconst loadingIcon = icon('loading');\ndiv.appendChild(loadingIcon);\n```\n";
